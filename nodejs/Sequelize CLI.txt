To interact with the database using Sequelize, you'll need to use Sequelize CLI commands for tasks such as creating models, migrations, and running those migrations to update your database schema. Here are the Sequelize commands you'll commonly use.

### 1. Install Sequelize CLI
First, install Sequelize CLI globally or as a development dependency in your project:

```bash
npm install --save-dev sequelize-cli
```

Alternatively, you can install it globally:

```bash
npm install -g sequelize-cli
```

### 2. Initialize Sequelize (if not already done)

To initialize Sequelize in your project, run the following command:

```bash
npx sequelize-cli init
```

This will create the following folder structure in your project:

```
/config
/models
/migrations
/seeders
```

### 3. Create a Model

Sequelize CLI allows you to create models and migrations together. For example, if you want to create a `User` model, use this command:

```bash
npx sequelize-cli model:generate --name User --attributes username:string,email:string,password:string,bio:text
```

This command will generate two files:

- **Model file**: `models/user.js`
- **Migration file**: `migrations/xxxx-create-user.js` (The exact name will depend on the timestamp)

### 4. Run Migrations

Once you've created your models and migrations, you'll need to run the migration to update the database schema:

```bash
npx sequelize-cli db:migrate
```

This will execute the migrations and update your database schema accordingly.

### 5. Undo a Migration

If you need to undo the last migration you performed, use the following command:

```bash
npx sequelize-cli db:migrate:undo
```

You can undo all migrations with:

```bash
npx sequelize-cli db:migrate:undo:all
```

### 6. Create a Seeder

Seeders allow you to populate your database with initial or test data. To create a seeder, you can run:

```bash
npx sequelize-cli seed:generate --name demo-user
```

This will create a seeder file in the `/seeders` directory. You can modify this file to populate your database with data. For example, in the `demo-user.js` seeder:

```javascript
'use strict';

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.bulkInsert('Users', [
      {
        username: 'john_doe',
        email: 'john@example.com',
        password: 'hashed_password',
        bio: 'Hello, I am John Doe!',
        createdAt: new Date(),
        updatedAt: new Date(),
      },
    ]);
  },

  down: async (queryInterface, Sequelize) => {
    await queryInterface.bulkDelete('Users', null, {});
  },
};
```

To run the seeder:

```bash
npx sequelize-cli db:seed:all
```

This will insert the data specified in the seeder file into the database.

To undo a seeder:

```bash
npx sequelize-cli db:seed:undo
```

### 7. Generate a Migration Manually

If you need to make changes to the database schema (like adding a new column or modifying an existing column), you can create a migration manually. For example, if you want to add a `profileImage` column to the `Users` table:

```bash
npx sequelize-cli migration:generate --name add-profile-image-to-user
```

This creates a migration file in the `/migrations` directory. Then, you can edit the generated migration to add a new column:

```javascript
'use strict';

module.exports = {
  up: async (queryInterface, Sequelize) => {
    await queryInterface.addColumn('Users', 'profileImage', {
      type: Sequelize.STRING,
      allowNull: true,
    });
  },

  down: async (queryInterface, Sequelize) => {
    await queryInterface.removeColumn('Users', 'profileImage');
  },
};
```

After editing, run the migration to apply the changes:

```bash
npx sequelize-cli db:migrate
```

### 8. Testing and Troubleshooting

- **Check database status**: You can check the current status of your migrations with:

  ```bash
  npx sequelize-cli db:migrate:status
  ```

- **Logging in Sequelize**: If you want to log SQL queries while running Sequelize, you can set the `logging` option in your Sequelize configuration to `console.log` (or any custom logging function).

### Summary of Key Sequelize CLI Commands

- **Initialize Sequelize**: `npx sequelize-cli init`
- **Generate Model and Migration**: `npx sequelize-cli model:generate --name ModelName --attributes attr1:type,attr2:type`
- **Run Migrations**: `npx sequelize-cli db:migrate`
- **Undo Migrations**: `npx sequelize-cli db:migrate:undo`
- **Generate Seeder**: `npx sequelize-cli seed:generate --name seederName`
- **Run Seeders**: `npx sequelize-cli db:seed:all`
- **Undo Seeders**: `npx sequelize-cli db:seed:undo`
- **Generate Migration**: `npx sequelize-cli migration:generate --name migrationName`

These are the most common commands you'll need to manage your Sequelize models, migrations, and seeders efficiently.